* <main> LoopControlTest {
    ^ observe_execution {
        speak("=== Testing Loop Control (Break/Continue) ===")

        # Test 1: Break in count loop
        speak("Test 1: Break in count loop")
        counter <> 0
        loop <> count(10) {
            counter <> calc(counter, 1)
            if <> (counter == 5) <else> (true) {
                speak("Breaking at 5!")
                break
            <>
                speak("Still going...")
            }
        }

        # Test 2: Continue in range loop
        speak("Test 2: Continue - only odd numbers")
        loop <> range(1, 10) as i {
            remainder <> calc(i, -2)
            if <> (remainder == 0) <else> (true) {
                continue
            <>
                speak("Odd: ~i~")
            }
        }

        # Test 3: Break in while loop
        speak("Test 3: Break when target found")
        attempts <> 0
        loop <> while (attempts < 100) {
            attempts <> calc(attempts, 1)
            num <> randomChoice([10, 11, 12, 13, 14, 15])

            if <> (num == 12) <else> (true) {
                speak("Found 12 after ~attempts~ attempts!")
                break
            <>
                speak("Attempt ~attempts~: ~num~")
            }
        }

        # Test 4: Combined break and continue
        speak("Test 4: Skip evens, stop at 15")
        loop <> range(1, 20) as n {
            if <> (n == 15) <else> (true) {
                speak("Reached 15, stopping")
                break
            <>
                speak("Continuing...")
            }

            remainder2 <> calc(n, -2)
            if <> (remainder2 == 0) <else> (true) {
                continue
            <>
                speak("Processing odd: ~n~")
            }
        }

        # Test 5: Nested loops with break
        speak("Test 5: Nested loops - break inner only")
        loop <> range(1, 4) as outer {
            speak("Outer: ~outer~")
            loop <> range(1, 6) as inner {
                if <> (inner == 3) <else> (true) {
                    speak("  Breaking inner at 3")
                    break
                <>
                    speak("  Inner: ~inner~")
                }
            }
        }

        speak("=== All loop control tests complete ===")
    }
}
