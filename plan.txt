# TAURI INTEGRATION FIXES PLAN
# Feed this file to Claude Code to implement these improvements

## OVERVIEW
Fix 4 critical issues with the Quantum Consciousness IDE Tauri integration:
1. Console output not showing in UI
2. userin() prompts not working in GUI
3. Cache file causing Tauri to reload and lose memory
4. Hardcoded file paths breaking portability

---

## FIX 1: REAL-TIME CONSOLE OUTPUT
### Problem
println!() statements in Rust go to hidden terminal, not visible in Tauri UI.

### Solution
Implement Tauri event system to stream console output to UI in real-time.

### Changes Required

#### A. Create new Tauri command in src/tauri_commands.rs
- Add a function that captures stdout/stderr
- Use Tauri's emit() to send console messages to frontend
- Create a ConsoleMessage struct with timestamp and message content
- Wrap existing transpiler execution to intercept all print statements

#### B. Modify ui/index.html
- Add event listener for "console-output" events
- Update the output div to show messages as they arrive
- Auto-scroll to bottom when new messages arrive
- Add timestamp to each message for clarity

#### C. Update src/lib.rs or main transpiler files
- Replace all println!() calls with a logging function that both:
  - Prints to console (for CLI mode)
  - Emits Tauri events (for GUI mode)
- Make this conditional so CLI mode still works normally

---

## FIX 2: INTERACTIVE USER INPUT (userin)
### Problem
userin() tries to read from stdin which doesn't exist in Tauri window.

### Solution
Create persistent input box with send button that enables only when input is needed.

### Changes Required

#### A. Update ui/index.html
- Add a new section below the output console:
  ```
  <div id="inputSection">
    <label id="inputPrompt">Waiting for input...</label>
    <input type="text" id="userInput" placeholder="Type here when prompted...">
    <button id="sendBtn" disabled>Send</button>
  </div>
  ```
- Style this section to look integrated with the console
- Initially have the send button disabled (disabled="true")

#### B. Create input handling in ui/index.html JavaScript
- Listen for "request-input" events from Rust
- When event received:
  - Enable the send button
  - Update the label to show the prompt text
  - Focus the input box automatically
- When send button clicked:
  - Disable button again
  - Call Tauri command send_user_input(value)
  - Clear the input box
  - Show "Sending..." in label

#### C. Add Tauri commands in src/tauri_commands.rs
- Add command: request_user_input(prompt: String)
  - Emits event to frontend with the prompt text
  - Blocks/waits for response
  - Returns the user's input string
- Add command: send_user_input(value: String)
  - Resolves the waiting request_user_input
  - Uses channels or async/await to communicate

#### D. Modify userin() function location (likely in src/interactive_engine.rs)
- Replace stdin read with call to Tauri command request_user_input
- Pass the prompt text to the command
- Wait for response from UI
- Return the received value
- Keep CLI mode working by detecting if Tauri is active

---

## FIX 3: CACHE FILE NOT TRIGGERING RELOAD
### Problem
When quantum_consciousness_cache.json is created/modified, Tauri dev mode auto-reloads and wipes memory.

### Solution Approach A: Ignore the cache file in Tauri watcher
#### Changes Required
- Modify tauri.conf.json build section
- Add excludes to the watcher configuration
- Exclude: "quantum_consciousness_cache.json" and "*.cache" files

### Solution Approach B: Move cache to safe location (RECOMMENDED)
#### Changes Required
- Update cache file location to use Tauri's app data directory
- In src/lib.rs or wherever cache is saved/loaded:
  - Use tauri::api::path::app_data_dir() to get proper directory
  - Store cache in: {app_data}/quantum_consciousness/cache.json
  - This location persists between sessions and doesn't trigger reloads
- Create the directory if it doesn't exist
- Update all cache load/save calls to use new location

---

## FIX 4: REMOVE HARDCODED FILE PATHS
### Problem
Working directory is hardcoded, breaks when project moves or runs on different computer.

### Solution
Use dynamic path resolution based on app location.

### Changes Required

#### A. Add Tauri command in src/tauri_commands.rs
- Add command: get_working_directory()
  - Returns the current app directory or user's home directory
  - Use tauri::api::path::app_dir() or similar
  - Return as string that JavaScript can use

#### B. Update ui/index.html to use dynamic paths
- On app initialization, call get_working_directory()
- Store this as a base path variable
- When user selects files, use relative paths from this base
- Or use full absolute paths from file dialog (preferred)

#### C. Fix file path handling in src/tauri_commands.rs
- Ensure run_file() command accepts full absolute paths
- Don't assume files are in specific directories
- Validate file exists before attempting to run
- Return clear error if file not found with the path that was attempted

#### D. Consider adding recent files list
- Store list of recently opened .slut files
- Save to app data (JSON file)
- Show in UI for quick access
- Use full absolute paths in this list

---

## TESTING CHECKLIST
After implementing fixes, verify:

### Console Output
- [ ] Running a .slut file shows print output in real-time in Tauri window
- [ ] Multi-line output displays correctly
- [ ] Output appears as program runs, not all at once at the end
- [ ] CLI mode still works and prints to terminal

### User Input
- [ ] Send button is disabled on startup
- [ ] When userin() is called, button enables and prompt shows
- [ ] User can type and click send
- [ ] Input is received by Rust code correctly
- [ ] Button disables again after sending
- [ ] Multiple sequential inputs work correctly

### Cache Handling
- [ ] Running a .slut file creates/updates cache
- [ ] Tauri does NOT reload when cache is modified
- [ ] Cache persists between Tauri sessions
- [ ] Cache location is printed to console on first run
- [ ] Running the same file twice uses cached variables

### File Paths
- [ ] Can select .slut files from any location on computer
- [ ] Can re-run the same file multiple times
- [ ] Moving the project folder doesn't break functionality
- [ ] Error messages show full path when file not found

---

## IMPLEMENTATION ORDER
1. Start with Fix 3 (cache location) - easiest and prevents frustration
2. Then Fix 1 (console output) - makes debugging easier
3. Then Fix 4 (file paths) - important for usability
4. Finally Fix 2 (user input) - most complex, builds on console output

---

## ADDITIONAL NOTES
- Keep CLI mode fully functional - only add Tauri features when in GUI mode
- Add error handling for all Tauri commands
- Consider adding a "Clear Console" button in UI
- Consider adding a "Stop Execution" button that actually works mid-run
- Test on both development mode and built executable

---

## FILES THAT WILL BE MODIFIED
- src/tauri_commands.rs (major changes)
- src/lib.rs (minor changes for logging)
- src/interactive_engine.rs (modify userin function)
- ui/index.html (add input section, update JavaScript)
- tauri.conf.json (exclude cache from watcher OR accept new cache location)
- Potentially other src/ files that use println!() heavily

---

## PRESERVE EXISTING FUNCTIONALITY
- Do NOT break the existing command-line interface
- Do NOT remove the run_test.bat functionality
- Do NOT change core transpiler logic
- Do NOT modify .slut file parsing or execution
- ONLY change input/output mechanisms and file handling